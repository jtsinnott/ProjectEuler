#load "utils.fs"
#load "Seq.fs"
#time

open Euler.Utils
open Euler.Seq
open System

(*
PROBLEM 1
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we
  get 3, 5, 6 and 9.
  The sum of these multiples is 23.  Find the sum of all the multiples of 3 or
  5 below 1000.
*)
let p1 () =
    [|1..999|]
    |> Seq.filter (fun i -> i % 3 = 0 || i % 5 = 0)
    |> Seq.sum

let p1' () =
    seq { for i in 1..999 do
            if i % 3 = 0 || i % 5 = 0 then
                yield i }
    |> Seq.sum

//p1 ()
//p1' ()

(*
PROBLEM 2
  Each new term in the Fibonacci sequence is generated by adding the previous
  two terms.
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.
*)
let p2 () =
    let rec fib (a : int) (b : int) = seq {
        yield a
        yield! (fib b (a + b))
    }

    fib 1 1
    |> Seq.takeWhile (fun x -> x < 4000000)
    |> Seq.where (fun x -> x % 2 = 0)
    |> Seq.sum

//p2 ()

(*
PROBLEM 3
  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143
*)
let p3 () =
    let n = 600851475143L
    seq { 2L..(sqrt'(n) + 2L) }
    |> Seq.filter (fun i -> n % i = 0L) // Filter by mod first.
    |> Seq.filter isPrime               // Then by isPrime.
    |> Seq.max

//p3 ()

(*
PROBLEM 4
  A palindromic number reads the same both ways. The largest palindrome made
  from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*)
let p4 () =
    seq { for i = 999 downto 100 do // Count down to get result faster.
            for j = 999 downto 100 do
                yield i * j }
    |> Seq.filter (string >> isPalindrome)
    |> Seq.take 1
    |> Seq.exactlyOne

//p4 ()

(*
PROBLEM 5
  2520 is the smallest number that can be divided by each of the numbers from
  1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the
  numbers from 1 to 20?
*)
let p5 () =
    let nums = seq { 2..20 }
    let isDivisibleByAllNums x = nums |> Seq.forall (fun y -> x % y = 0)
    // Here we increment in steps of <maxnum>
    let max = Seq.max nums
    Seq.unfold (fun x -> Some(x, x + max)) max
    |> Seq.find isDivisibleByAllNums

//p5 ()

(*
PROBLEM 6
  Find the difference between the sum of the squares of the first one hundred
  natural numbers and the square of the sum.
*)
let p6 () =
    let sumOfSquares x = x |> Seq.sumBy (fun x -> x*x)
    let squareOfSums x = let sumX = (Seq.sum x) in sumX * sumX
    let first100N = seq { 1..100 }
    abs((sumOfSquares first100N) - (squareOfSums first100N))

//p6 ()

(*
PROBLEM 7
  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
  that the 6th prime is 13.
  What is the 10 001st prime number?
*)
let p7 () =
  Seq.unfold (fun i -> Some(i, i+1L)) 1L
  |> Seq.filter isPrime
  |> Seq.item 10000 // item is 0 based index

//p7 ()

(*
PROBLEM 8
  The four adjacent digits in the 1000-digit number that have the greatest
  product are 9 × 9 × 8 × 9 = 5832.

  Find the thirteen adjacent digits in the 1000-digit number that have the
  greatest product. What is the value of this product?
*)
let p8 () =
  System.IO.File.ReadAllText("p8.txt").ToCharArray()
  |> Seq.windowed 13
  |> Seq.map product
  |> Seq.max

//p8 ()

(*
PROBLEM 9
  A Pythagorean triplet is a set of three natural numbers, a < b < c, for
  which a^2 + b^2 = c^2.
  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product abc.
*)
let p9 () =
  seq { for a = 1 to 1000 do
          for b = 1 to (1000-a) do
            let c = 1000 - a - b
            if a*a + b*b = c*c then
              yield (a, b, c) }
  |> Seq.distinctBy (fun (a, b, c) -> a + b + c)
  |> Seq.map (fun (a, b, c) -> a * b * c)
  |> List.ofSeq

//p9 ()

(*
PROBLEM 10
  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.
*)
let p10 () =
  seq { 2L..(2000000L-1L) }
  |> Seq.filter isPrime
  |> Seq.sum

//p10 ()

(*
PROBLEM 11
  In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
  The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
  What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
*)

type Direction = Down | Right | DownRight | DownLeft
let p11 () =
  let grid =
    let digits = System.IO.File.ReadAllText("p11.txt")
    digits.Split('\n')
    |> Array.map (fun l -> l.Split(' ') |> Array.map int)

  let max_i, max_j = grid.Length - 1, grid.[0].Length - 1

  let gridVec i j n d =
    let up i n = [| i..(-1)..(i - (n-1)) |]
    let dn i n = [| i..(i + (n-1)) |]
    let lt j n = [| j..(-1)..(j - (n-1)) |]
    let rt j n = [| j..(j + (n-1)) |]
    let stay (x : int) n = Array.replicate n x
    let f (i, j) = i <= max_i && i > 0 && j <= max_j && j > 0
    let vec = function
      | Down      -> Array.zip (dn i n) (stay j n)
      | Right     -> Array.zip (stay i n) (rt j n)
      | DownRight -> Array.zip (dn i n) (rt j n)
      | DownLeft  -> Array.zip (dn i n) (lt j n)
    d |> vec |> Array.filter f

  let gridVecProd i j n d =
    gridVec i j n d
    |> Array.map (fun (i,j) -> grid.[i].[j])
    |> (fun xs -> if (Array.isEmpty xs) then 0 else Array.reduce (*) xs)

  seq {
    for i in 0..max_i do
      for j in 0..max_j do
        for d in [Down; Right; DownLeft; DownRight] do
          yield gridVecProd i j 4 d
  } |> Seq.max

//p11 ()

(*
PROBLEM 12
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
  The first ten terms would be:
  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.
  What is the value of the first triangle number to have over five hundred
  divisors?
*)
let p12 () =
  let triangleNum n = [1L..n] |> Seq.sum
  let naturalNums = Seq.unfold (fun i -> Some (triangleNum i, i+1L)) 1L

  naturalNums
  |> Seq.map (fun t -> (t, Seq.length (divisors t)))
  |> Seq.find (fun (_, l) -> l > 500)

//p12 ()

(*
PROBLEM 13
    Work out the first ten digits of the sum of the following one-hundred
    50-digit numbers.
*)
let p13() =
  System.IO.File.ReadAllLines("p13.txt")
  |> Array.map (fun x -> Int64.Parse (x.Substring(0, 11)))
  |> Array.sum
  |> (fun x -> (string x).Substring(0, 10))

//p13 ()

(*
PROBLEM 14
  The following iterative sequence is defined for the set of positive integers:

  n → n/2 (n is even)
  n → 3n + 1 (n is odd)

  Using the rule above and starting with 13, we generate the following
  sequence:

  13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
  It can be seen that this sequence (starting at 13 and finishing at 1)
  contains 10 terms. Although it has not been proved yet (Collatz Problem),
  it is thought that all starting numbers finish at 1.

  Which starting number, under one million, produces the longest chain?
  Note: Once the chain starts the terms are allowed to go above one million.
*)
